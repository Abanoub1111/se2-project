-- model

--------------------------------------------
class User
attributes
	name: String
	id: Integer
	password: String
	role: String
	email: String
operations
	login(email, password)
	register(info)
	update_profile(info)
end

--------------------------------------------

class Category
attributes
	category_name: String
	category_id: Integer
operations
	create_category(Category)
	delete_category(id)
	update_category(id)
	retrieve_category(id)
end

--------------------------------------------
	
class Product
attributes
	product_name: String
	product_id: Integer
	description: String
	price: Integer
	category_id: Integer
	stockQuantity: Integer
operations
	create_product(Product)
	delete_product(id)
	update_product(id)
	retrieve_product(id)
	retrieve_all_products()
end

--------------------------------------------

class Cart
attributes
	customer_id: Integer
	cart_id: Integer
	items[]: CartItem 
operations
	add_item()
	remove_item()
end

--------------------------------------------

class CartItem
attributes
	cart_item_id: Integer
	product_id: Integer
	quantity: Integer
operations
end

--------------------------------------------

class Order
attributes
	order_id: Integer
	order_Date: Date
	customer_id: Integer
	total_price: Integer
operations
end

--------------------------------------------

class OrderItem
attributes
	order_item_id: Integer
	product_id: Integer
	quantity: Integer
operations
end

--------------------------------------------

-- OCL constraints

constraints

--------------------------------------------
-- Admin who can make CRUD operations on the product
context Product::create_product(info : Product)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.email = info.email)

context Product::delete_product(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Product::update_product(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Product::retrieve_product(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Product::retrieve_all_products()
pre: User.allInstances()->exists(u | u.role = 'admin')

context Product
inv: Product.allInstances()->isUnique(id)

context Product
inv: self.stockQuantity >= 0

context Product
inv: self.price >= 0




--------------------------------------------
-- Admin who can make CRUD operations on the category
context Category::create_category(info : Category)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.email = info.email)

context Category::delete_category(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Category::update_category(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Category::retrieve_category(id : Integer)
pre: User.allInstances()->exists(u | u.role = 'admin' and u.id = self.category_id)

context Category
inv: Category.allInstances()->isUnique(category_id)

context Category
inv: self.parentCategory->isEmpty() or self.parentCategory->forAll(parent | parent.category_id <> self.category_id)


--------------------------------------------
context Order
inv: self.total_price = self.items->collect(item | item.product.price * item.quantity)->sum())


--------------------------------------------
context User
inv: self.role = 'admin' implies self.isAuthenticated()
